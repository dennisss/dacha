syntax = "proto3";

import "pkg/raft/src/proto/consensus.proto";
import "pkg/raft/src/proto/server_metadata.proto";
import "third_party/google/src/proto/timestamp.proto";

// Record describing how a specific server in a Raft group can be reached for requests.
message Route {
    // REQUIRED
    GroupId group_id = 1;

    // REQUIRED
    ServerId server_id = 2;

    // Ip address and port at which this server can be contacted.
    // TODO: Store in binary format.
    //
    // REQUIRED
    string addr = 3;

    // Last time this server was announced by the server that owns it (the one located at 'addr').
    // If a server doesn't announce the path to itself for a while, other servers may consider it
    // to be dead and discard its route.
    //
    // REQUIRED
    google.protobuf.Timestamp last_seen = 4;

    // Last time this route was retrieved or was observed in an incoming
    // request
    //
    // REQUIRED
    google.protobuf.Timestamp last_used = 5;
}

// Thin-serializable state of the server
// Other details like the group_id and from_id are separately managed
message Announcement {
    // Emitted as a routes vector
    // Merged with the rest of our data
    repeated Route routes = 1;
}

service Discovery {
    rpc Announce (Announcement) returns (Announcement);
}
