use std::convert::TryFrom;
use std::sync::Arc;

use common::bytes::Bytes;
use common::errors::*;
use parsing::ascii::AsciiString;
use reflection::{ParseFrom, SerializeTo};

use crate::{GoogleServiceAccount, GoogleServiceAccountOAuth2Credentials};

/// Base client library for querying Google REST APIs.
///
/// Normally you won't use this directly but rather use it indirectly via one of
/// the autogenerated discovery client libraries.
pub struct GoogleRestClient {
    http_client: http::SimpleClient,
    credentials: GoogleServiceAccountOAuth2Credentials,
}

impl GoogleRestClient {
    pub fn create(service_account: Arc<GoogleServiceAccount>) -> Result<Self> {
        let http_client = http::SimpleClient::new(http::SimpleClientOptions::default());

        let credentials = GoogleServiceAccountOAuth2Credentials::create(
            service_account,
            &[
                // Catch all scope.
                "https://www.googleapis.com/auth/cloud-platform",
            ],
        )?;

        Ok(Self {
            http_client,
            credentials,
        })
    }

    pub async fn request_json<Request: SerializeTo, Response: for<'a> ParseFrom<'a>>(
        &self,
        method: http::Method,
        url: &str,
        query: &str,
        request_body: &Request,
    ) -> Result<Response> {
        let mut uri = http::uri::Uri::try_from(url)?;
        if uri.query.is_some() {
            return Err(err_msg("Did not expect the uri to already contain a query"));
        }

        if !query.is_empty() {
            uri.query = Some(AsciiString::new(query));
        }

        let request = http::RequestBuilder::new()
            .method(method)
            .uri2(uri)
            .header(
                "Authorization",
                self.credentials.get_authorization_value().await?,
            )
            .build()?;

        let body = Bytes::from(json::stringify(request_body)?);

        let res = self
            .http_client
            .request(&request.head, body, &http::ClientRequestContext::default())
            .await?;

        // TODO: Parse the error payload as in https://cloud.google.com/apis/design/errors
        // For this we will need to support parsing Any protos from JSON.
        if res.head.status_code != http::status_code::OK {
            return Err(format_err!("RPC failed: {:?}", res.body));
        }

        let value = json::parse(std::str::from_utf8(&res.body)?)?;

        let object = Response::parse_from(json::ValueParser::new(&value))?;

        Ok(object)
    }
}
