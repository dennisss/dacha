syntax = "proto3";

package cluster;

// Configuration for starting a container.
//
// Meant to be loosely compatible with:
// https://github.com/opencontainers/runtime-spec/blob/master/config.md
message ContainerConfig {

    ContainerProcess process = 1;

    repeated ContainerMount mounts = 2;
}

message ContainerProcess {

    // Current working directory for the container.
    // Must be absolute. If not specified, the container will be started at '/' in the container.
    string cwd = 5;

    // TODO: cwd
    // ^ Must be an absolute path.

    // Arguments to use for starting the main process of the container.
    // The first argument should be an absolute path to an executable binary.
    repeated string args = 1;

    // Environment variables to pass to the container. Each string should be of the form
    // "KEY=VALUE".
    repeated string env = 2;

    // If true, then we'll create a pty device that is cloned to stdin/out/err file descriptors
    // on the container process.
    bool terminal = 3;

    // TODO: Support adjusting the umask
    message User {
        uint32 uid = 1;
        uint32 gid = 2;
        repeated uint32 additional_gids = 3; 
    }
    User user = 4;
}

message ContainerMount {
    string destination = 1;
    
    // Type can be 'symlink'
    string type = 2;
    string source = 3;
    repeated string options = 4;

    // If true, then we will skip this mount if the 'source' doesn't exist.
    bool optional = 5;
}



message ContainerMetadata {
    string id = 1;

    ContainerState state = 2;

    // Present when the state is Stopped to indicate why the container stopped.
    ContainerStatus status = 3;

    ContainerResourceUsage resource_usage = 4;
}

message ContainerResourceUsage {
    float cpu_fraction = 1;
    uint64 memory_bytes = 2;
}

enum ContainerState {
    Unknown = 0;
    Creating = 1;
    Created = 2;
    Running = 3;
    Stopped = 4;
}

message ContainerStatus {
    oneof status {
        int32 exit_code = 1;
        string killed_signal = 2;
    }
}