syntax = "proto3";

package cluster;

import "pkg/container/proto/config.proto";
import "pkg/container/proto/log.proto";
import "pkg/container/proto/worker.proto";
import "pkg/container/proto/meta.proto";
import "pkg/container/proto/worker_event.proto";
import "pkg/container/proto/labels.proto";
import "google/protobuf/empty.proto";

message ListWorkersRequest {
    // If present, we will only return data for the container with this id.
    // An empty list will be returned if no such container exists. 
    string container_id = 1;
}

message ListWorkersResponse {
    repeated WorkerProto workers = 1;
}

// Serialized state of a worker currently started on a node.
message WorkerProto {
    WorkerSpec spec = 1;
    WorkerStateProto state = 2;
    ContainerMetadata container = 3;
    uint64 revision = 4;
    StartWorkerRequest pending_update = 5;
}

enum WorkerStateProto {
    UNKNOWN = 0;
    PENDING = 1;
    RUNNING = 2;
    STOPPING = 3;
    FORCE_STOPPING = 4;
    RESTART_BACKOFF = 5;
    DONE = 6;
}

message StartWorkerRequest {
    WorkerSpec spec = 1;
    uint64 revision = 2;
}

message StartWorkerResponse {

}

message RestartWorkerRequest {

}

message RestartWorkerResponse {

}


message LogRequest {
    string worker_name = 1;

    uint64 attempt_id = 2;

    uint64 start_offset = 3;

    // TODO: Consider supporting things like time/text filters?
}

message WriteInputRequest {

    string worker_name = 1;

    bytes data = 2;
}

message ReplicateBlobRequest {
    string blob_id = 1;
}

message GetEventsRequest {
    string worker_name = 1;
}

message GetEventsResponse {
    repeated WorkerEvent events = 1;
}

message UpdateLabelsRequests {
    Labels labels = 1;
}

service ContainerNode {

    // TODO: How do we ensure that a node never switches places with another node ip. (then the manager may be sending the wrong requests to the wrong server if data is stale). So we need every request to be richly authenticated with a host name.
    // ^ RPC HTTP servers should minimally reject any request coming to the wrong host name.
    rpc Identity (google.protobuf.Empty) returns (NodeMetadata);

    // Enumerates all workers present on this node.
    rpc ListWorkers (ListWorkersRequest) returns (ListWorkersResponse);

    /// Starts running a worker on this node using the given spec.
    ///
    /// - If a worker with the same name already exists on this node, it will stopped and replaced
    ///   with one using the new spec.
    /// - This will return as soon as the node has durably ingested the request. The actual
    ///   starting/stopping of the worker will occur asynchronously.
    ///
    /// TODO: Eventually also need an API to delete a worker and know for sure this node will no longer try to start it.
    rpc StartWorker (StartWorkerRequest) returns (StartWorkerResponse);

    // // Triggers the stopping of a worker.
    // //
    // // This executes asynchronously.
    // // - If the worker is running, we will try to gracefully stop it
    // // - If the worker is not running, we will stop trying to backoff, etc. and enter a Terminal state.
    // // - If 
    // //
    // rpc StopWorker (StopWorkerRequest) returns (StopWorkerResponse);

    // /// Triggers the stopping of an existing worker followed by immediately starting it again.
    // ///
    // /// If the worker is currently in backoff, the backoff will be reset.  
    // rpc RestartWorker (ReStartWorkerRequest) returns (RestartWorkerResponse);

    // // Removes all data associated with a given worker from this node.
    // //
    // // This includes:
    // // - worker spec
    // // - stdout/stderr logs.
    // // - information on past attempts
    // //
    // // By default all the above data is retained even after a worker is stopped to allow it to be
    // // backed up to a remote logging service before being deleted.
    // //
    // // NOTE: The worker must first be in a Terminal state before it can be deleted.
    // rpc DeleteWorker (DeleteWorkerRequest) returns (DeleteWorkerResponse); 

    rpc WriteInput (stream WriteInputRequest) returns (google.protobuf.Empty);

    /// Asks the node to fetch and locally store the blob with the given id.
    /// This is called by the manager to ensure blobs are sufficiently mirrored.
    rpc ReplicateBlob (ReplicateBlobRequest) returns (google.protobuf.Empty);

    // rpc ExecProcess (ExecProcess)

    // Streams back log entries for a single worker.
    // Rename to GetLog
    rpc GetLogs(LogRequest) returns (stream LogEntry);

    rpc GetEvents(GetEventsRequest) returns (GetEventsResponse);

    rpc GetLabels (google.protobuf.Empty) returns (Labels);

    rpc UpdateLabels (UpdateLabelsRequests) returns (google.protobuf.Empty);
}
