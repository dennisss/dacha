// The file contains the format of the records stored in the source of truth metastore instance
// used by the entire cluster.

syntax = "proto3";

package cluster;

import "pkg/container/src/proto/worker.proto";
import "pkg/container/src/proto/job.proto";
import "pkg/container/src/proto/blob.proto";
import "pkg/container/src/proto/node.proto";
import "third_party/google/src/proto/timestamp.proto";
import "pkg/builder/src/proto/bundle.proto";
import "third_party/google/src/proto/any.proto";

// Ids of different tables stored in the main cluster metastore instance.
// The numerical values of these dis are used as a key prefix in the key-value store.
enum ClusterTableId {
    UNKNOWN = 0;
    Zone = 1;
    Node = 2;
    Job = 3;
    Worker = 4;
    WorkerByNode = 5;
    WorkerState = 6;
    Blob = 7;
    Object = 8;
}

// Stored at a singleton at the metastore key '/cluster/zone'
message ZoneMetadata {
    string name = 1;
}

/*
Restarting a node:
- Mark it as draining
- Suppose we drain a node because it is offline
    - If we re-assign workers to another node and the old machine comes back online, we must prevent WorkerMetadata contention by having each node check the 'assigned_node' field to verify that it is actually still the owner of a worker
*/


// Information about a node attached to the cluster.
// Stored at the metastore key '/cluster/node/[node_id]'
message NodeMetadata {
    uint64 id = 1;

    // Address at which this node can be contacted including the port on which the control RPC
    // server is running.
    //
    // e.g. "10.0.0.102:10400"
    string address = 2;

    enum State {
        UNKNOWN = 0;
        
        // This is a brand new node this has just joined the cluster.
        // In this state, the node won't start/stop any workers assigned to it.
        NEW = 1;

        // This is a regular node and will start any workers newly assigned to it and stop any workers
        // which aren't assigned to it in the metastore.
        ACTIVE = 2;
        
        DRAINING = 3;
        
        RESTARTING = 4;
    }
    State state = 3;

    // Last time this node started its runtime (e.g. after the last reboot).
    google.protobuf.Timestamp start_time = 4;

    //
    google.protobuf.Timestamp last_seen = 5;

    PortRange allocatable_port_range = 6;

    repeated uint32 allocated_ports = 7 [unordered_set = true];

    string zone = 8;

    // TODO: Enumerate capabilities, platform, etc.

    // TODO: When was the node added

    // TODO: Build time of the runtime
}

message JobMetadata {
    JobSpec spec = 1;

    // Monotonic counter which is increased each time the WorkerSpec is changed.
    uint64 worker_revision = 2;
}

// Defines the intent for a single instance of a Worker which we want to run on some specific node.
message WorkerMetadata {
    // Spec used to run this worker.
    // This should be mostly the same as the spec in the JobSpec but also includes a resolved
    // 'name', port numbers, etc.
    //
    // REQUIRED
    WorkerSpec spec = 1;

    // Id of the node which this worker is running on.
    //
    // NOTE: This field is immutable. Moving a worker to another node requires creating a new name.
    //
    // REQUIRED
    uint64 assigned_node = 2;

    // If true, this worker should be stopped by the node and not started again.
    //
    // Once drain == true, this WorkerMetadata proto is guranteed to not change again and will be
    // deleted once the node markes the worker is DONE in the WorkerStateMetadata.
    //
    // OPTIONAL
    bool drain = 3;

    // Revision of this worker.
    // When this is equal to the corresponding JobMetadata::worker_revision, this worker doesn't need
    // to be updated.
    uint64 revision = 4;
}

// Current high level progress of running a worker specified in a corresponding WorkerMetadata entry.
//
// While the WorkerMetadata entries are updated by Manager jobs, this proto is updated by the Nodes.
// A Node must ONLY update the WorkerStateMetadata when a WorkerMetadata entry exists. 
//
// This is meant to be a TLDR of the current state of the worker and very concise. Lower level
// details such as the # of restarts, etc. will be stored in local node storage.
//
// This has the following main use-cases:
// 1. Used by the Manager job to know when a worker has been fully brought up or turned down in order
//    to allow more workers to be added/deleted/updated.
// 2. Used by RPC clients to know if a worker can be reached.
//
// TODO: Connections to the metastore should not depend on observing the readiness of the workers.
message WorkerStateMetadata {
    string worker_name = 1;

    // Current state which the node 
    //
    // NOTE: This value can only be trusted if the NodeMetadata of the assigned node has a recent
    // last_seen time (indicating that the node hasn't died).
    enum ReportedState {
        UNKNOWN = 0;

        // The node is currently starting or stopping this worker. It can't be reliably queried.
        UPDATING = 1;

        // This worker is running on the assigned node and has passed readiness checks.
        // This is the only state in which it is ok for users to send traffic to this worker.
        READY = 2;

        // The worker isn't running and won't be re-started unless a new worker revision is available.
        DONE = 3;
    }
    ReportedState state = 2;

    // The worker revision at which the 'state' field is valid.
    //
    // NOTE: If a client notices that the WorkerMetadata includes a new revision, but the WorkerStateMetadata shows that the worker is READY at an old revision, it should stop ending traffic under the expectation that it will be updated soon.
    uint64 worker_revision = 3;
}

message BlobMetadata {
    builder.BlobSpec spec = 1;

    // List of the ids of all nodes which are known to have this blob.
    repeated BlobReplica replicas = 2;

    // Last time this blob was referenced in some registered job.
    // If this is empty, then it is actively in use.
    google.protobuf.Timestamp last_used = 3;
}

message BlobReplica {
    uint64 node_id = 1;

    bool uploaded = 2;

    google.protobuf.Timestamp timestamp = 3;
}


message ObjectMetadata {
    string name = 1;
    google.protobuf.Any value = 2;
}
