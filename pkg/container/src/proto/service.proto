syntax = "proto3";

import "pkg/container/src/proto/config.proto";
import "pkg/container/src/proto/log.proto";


message QueryRequest {
    // If present, we will only return data for the container with this id.
    // An empty list will be returned if no such container exists. 
    string container_id = 1;
}

message QueryResponse {
    repeated ContainerMetadata container = 1;
}


message StartRequest {
    ContainerConfig config = 1;
}

message StartResponse {
    string container_id = 1;
}


message TaskSpec {
    string name = 1;

    repeated string args = 3;

    repeated string env = 4;

    // Volumes to mount. Files will be accessible at '/volumes/{name}/...'
    message Volume {
        string name = 1;
        string blob_id = 2;
    }
    repeated Volume volumes = 2;

    enum RestartPolicy {
        UNKNOWN = 0;
        NEVER = 1;
        ON_FAILURE = 2;
        ALWAYS = 3;
    }
    RestartPolicy restart_policy = 5;

    // TODO: Add labels?
}


message StartTaskRequest {
    TaskSpec task_spec = 1;
}

message StartTaskResponse {

}

message LogRequest {
    string task_name = 1;
    uint64 start_offset = 2;

    // TODO: Consider supporting things like time/text filters?
}


message BlobData {
    // Id of the blob. Should be the hex version of the SHA256
    string id = 1;

    bytes data = 2;
}

message WriteInputRequest {

    string task_name = 1;

    bytes data = 2;
}

message EmptyMessage {

}


service ContainerNode {

    rpc Query (QueryRequest) returns (QueryResponse);

    // rpc Start (StartRequest) returns (StartResponse);

    rpc StartTask (StartTaskRequest) returns (StartTaskResponse);

    rpc WriteInput (stream WriteInputRequest) returns (EmptyMessage);

    // rpc ExecProcess (ExecProcess)

    // Streams back log entries for a single task.
    rpc GetLogs(LogRequest) returns (stream LogEntry);

    rpc UploadBlob(stream BlobData) returns (EmptyMessage);

}