syntax = "proto3";

package cluster;

import "pkg/container/src/proto/config.proto";
import "pkg/container/src/proto/log.proto";
import "pkg/container/src/proto/task.proto";
import "pkg/container/src/proto/meta.proto";
import "third_party/google/src/proto/empty.proto";

message QueryRequest {
    // If present, we will only return data for the container with this id.
    // An empty list will be returned if no such container exists. 
    string container_id = 1;
}

message QueryResponse {
    repeated ContainerMetadata container = 1;
}


// message StartRequest {
//     ContainerConfig config = 1;
// }

// message StartResponse {
//     string container_id = 1;
// }

message StartTaskRequest {
    TaskSpec task_spec = 1;
}

message StartTaskResponse {

}

message LogRequest {
    string task_name = 1;
    uint64 start_offset = 2;

    // TODO: Consider supporting things like time/text filters?
}


message BlobData {
    // Id of the blob. Should be the hex version of the SHA256
    string id = 1;

    bytes data = 2;
}

message WriteInputRequest {

    string task_name = 1;

    bytes data = 2;
}

service ContainerNode {

    // TODO: How do we ensure that a node never switches places with another node ip. (then the manager may be sending the wrong requests to the wrong server if data is stale). So we need every request to be richly authenticated with a host name.
    // ^ RPC HTTP servers should minimally reject any request coming to the wrong host name.
    rpc Identity (google.protobuf.Empty) returns (NodeMetadata);

    rpc Query (QueryRequest) returns (QueryResponse);

    // rpc Start (StartRequest) returns (StartResponse);

    // TODO: Eventually also need an API to delete a task and know for sure this node will no longer try to start it.
    rpc StartTask (StartTaskRequest) returns (StartTaskResponse);

    rpc WriteInput (stream WriteInputRequest) returns (google.protobuf.Empty);

    // rpc ExecProcess (ExecProcess)

    // Streams back log entries for a single task.
    rpc GetLogs(LogRequest) returns (stream LogEntry);

    rpc UploadBlob(stream BlobData) returns (google.protobuf.Empty);

}