
# aligned(8) class Box (unsigned int(32) boxtype,
#     optional unsigned int(8)[16] extended_type) {
#     unsigned int(32) size;
#     unsigned int(32) type = boxtype;
#     if (size==1) {
#         unsigned int(64) largesize;
#     } else if (size==0) {
#         // box extends to end of file
#     }
#     if (boxtype=='uuid') {
#         unsigned int(8)[16] usertype = extended_type;
#     }
# }


# structs {
#     name: "Box"
#     endian: BIG_ENDIAN
#     field {
#         name: "header"
#         type { named: "BoxHeader" }
#     }
#     field {
#         name: "data"
#         type {
#             buffer {
#                 element_type { primitive: U8 }
#                 length_field_name: "header.length"
                
#                 # end_terminated: true
#             }

#             codec { named: "BoxData" }
#         }
#     }
# }

structs {
    name: "BoxHeader"
    endian: BIG_ENDIAN
    field {
        name: "length"
        type { primitive: U32 }
    }
    field {
        name: "typ"
        type { string { buffer { element_type { primitive: U8 } fixed_length: 4 } charset: UTF8 } }
    }
}



unions {
    name: "BoxData"
    endian: BIG_ENDIAN
    switch_value: "typ"
    argument {
        name: "typ"
        type { string { buffer { element_type { primitive: U8 } fixed_length: 4 } charset: UTF8 } }
    }
    case {
        name: "FileTypeBox",
        case_value: '"ftyp"'
        type { named: "FileTypeBox" }
    }
    case {
        name: "MovieHeaderBox",
        case_value: '"mvhd"'
        type { named: "MovieHeaderBox" }
    }
    case {
        name: "TrackHeaderBox",
        case_value: '"tkhd"'
        type { named: "TrackHeaderBox" }
    }
    case {
        name: "MediaHeaderBox",
        case_value: '"mdhd"'
        type { named: "MediaHeaderBox" }
    }
    case {
        name: "HandlerBox",
        case_value: '"hdlr"'
        type { named: "HandlerBox" }
    }
    case {
        name: "VideoMediaHeaderBox",
        case_value: '"vmhd"'
        type { named: "VideoMediaHeaderBox" }
    }
    case {
        name: "TimeToSampleBox",
        case_value: '"stts"'
        type { named: "TimeToSampleBox" }
    }
    case {
        name: "SyncSampleBox",
        case_value: '"stss"'
        type { named: "SyncSampleBox" }
    }
    case {
        name: "EditListBox",
        case_value: '"elst"'
        type { named: "EditListBox" }
    }
    case {
        name: "DataEntryUrlBox",
        case_value: '"url "'
        type { named: "DataEntryUrlBox" }
    }
    case {
        name: "ChunkOffsetBox",
        case_value: '"stco"'
        type { named: "ChunkOffsetBox" }
    }
    case {
        name: "SampleToChunkBox",
        case_value: '"stsc"'
        type { named: "SampleToChunkBox" }
    }
    case {
        name: "SampleSizeBox",
        case_value: '"stsz"'
        type { named: "SampleSizeBox" }
    }
    case {
        name: "AVCDecoderConfigurationRecord",
        case_value: '"avcC"'
        type { named: "AVCDecoderConfigurationRecord" }
    }

    case {
        name: "Unknown"
        is_default: true
        type {
            buffer {
                element_type { primitive: U8 }
                end_terminated: true
            }
        }
    }
}


# aligned(8) class FullBox(unsigned int(32) boxtype, unsigned int(8) v, bit(24) f)
#    extends Box(boxtype) {
#    unsigned int(8) version = v;
#    bit(24) flags = f;
# }
structs {
    name: "FullBoxHeader"
    endian: BIG_ENDIAN
    # TODO: Must constrain this to only some values
    field {
        name: "version"
        type { primitive: U8 }
    }
    field {
        name: "flags"
        type { primitive: U32 }
        bit_width: 24
    }
}

# Container: File
# Mandatory: Yes
# Quantity: Exactly one
# Definiton:
#
# aligned(8) class FileTypeBox
#   extends Box(‘ftyp’) {
#   unsigned int(32) major_brand;
#   unsigned int(32) minor_version;
#   unsigned int(32) compatible_brands[]; // to end of the box
# }
structs {
    name: "FileTypeBox"
    endian: BIG_ENDIAN
    field {
        name: "major_brand"
        type { primitive: U32 }
    }
    field {
        name: "minor_version"
        type { primitive: U32 }
    }
    field {
        name: "compatible_brands"
        type {
            buffer {
                element_type { primitive: U32 }
                end_terminated: true
            }
        }
    }
}

# Container: Movie Box ('moov')
# Mandatory: Yes
# Quantity: Exactly one
# Definiton:
#
# aligned(8) class MovieHeaderBox extends FullBox('mvhd', version, 0) {
#    if (version==1) {
#        unsigned int(64) creation_time;
#        unsigned int(64) modification_time;
#        unsigned int(32) timescale;
#        unsigned int(64) duration;
#    } else { // version==0
#        unsigned int(32) creation_time;
#        unsigned int(32) modification_time;
#        unsigned int(32) timescale;
#        unsigned int(32) duration;
#    }
#    template int(32) rate = 0x00010000; // typically 1.0
#    template int(16) volume = 0x0100; // typically, full volume
#    const bit(16) reserved = 0;
#    const unsigned int(32)[2] reserved = 0;
#    template int(32)[9] matrix =
#    { 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };
#    // Unity matrix
#    bit(32)[6] pre_defined = 0;
#    unsigned int(32) next_track_ID;
# }
structs {
    name: "MovieHeaderBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "v1"
        type { named: "MovieHeaderBoxV1" }
        presence: "full_box_header.version == 1"
    }
    field {
        name: "v0"
        type { named: "MovieHeaderBoxV0" }
        presence: "full_box_header.version == 0"
    }
    field {
        name: "rate"
        type { primitive: U32 }
    }
    field {
        name: "volume"
        type { primitive: U16 }
    }
    field {
        name: "reserved1"
        type { primitive: U16 }
        constant_value { int64_value: 0 }
    }
    field {
        name: "reserved2"
        type {
            buffer {
                element_type { primitive: U32 }
                fixed_length: 2
            }
        }
        constant_value { int64_value: [0, 0] }
    }
    field {
        name: "matrix"
        type {
            buffer {
                element_type { primitive: U32 }
                fixed_length: 9
            }
        }
    }
    field {
        name: "pre_defined"
        type {
            buffer {
                element_type { primitive: U32 }
                fixed_length: 6
            }
        }
        constant_value { int64_value: [0, 0, 0, 0, 0, 0] }
    }
    field {
        name: "next_track_id"
        type { primitive: U32 }
    }
}

structs {
    name: "MovieHeaderBoxV1"
    endian: BIG_ENDIAN
    field {
        name: "creation_time"
        type { primitive: U64 }
    }
    field {
        name: "modification_time"
        type { primitive: U64 }
    }
    field {
        name: "timescale"
        type { primitive: U32 }
    }
    field {
        name: "duration"
        type { primitive: U64 }
    }
}

structs {
    name: "MovieHeaderBoxV0"
    endian: BIG_ENDIAN
    field {
        name: "creation_time"
        type { primitive: U32 }
    }
    field {
        name: "modification_time"
        type { primitive: U32 }
    }
    field {
        name: "timescale"
        type { primitive: U32 }
    }
    field {
        name: "duration"
        type { primitive: U32 }
    }
}

# Container: Track Box ('trak')
# Mandatory: Yes
# Quantity: Exactly one
#
# Definition: 
# aligned(8) class TrackHeaderBox
#    extends FullBox('tkhd', version, flags){
#    if (version==1) {
#        unsigned int(64) creation_time;
#        unsigned int(64) modification_time;
#        unsigned int(32) track_ID;
#        const unsigned int(32) reserved = 0;
#        unsigned int(64) duration;
#    } else { // version==0
#        unsigned int(32) creation_time;
#        unsigned int(32) modification_time;
#        unsigned int(32) track_ID;
#        const unsigned int(32) reserved = 0;
#        unsigned int(32) duration;
#    }
#    const unsigned int(32)[2] reserved = 0;
#    template int(16) layer = 0;
#    template int(16) alternate_group = 0;
#    template int(16) volume = { if track_is_audio 0x0100 else 0 };
#    const unsigned int(16) reserved = 0;
#    template int(32)[9] matrix=
#    { 0x00010000,0,0,0,0x00010000,0,0,0,0x40000000 };
#    // unity matrix
#     unsigned int(32) width;
#     unsigned int(32) height;
# }
structs {
    name: "TrackHeaderBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "v1"
        type { named: "TrackHeaderBoxV1" }
        presence: "full_box_header.version == 1"
    }
    field {
        name: "v0"
        type { named: "TrackHeaderBoxV0" }
        presence: "full_box_header.version == 0"
    }
    field {
        name: "reserved2"
        type {
            buffer {
                element_type { primitive: U32 }
                fixed_length: 2
            }
        }
        constant_value { int64_value: [0, 0] }
    }
    field {
        name: "layer"
        type { primitive: U16 }
    }
    field {
        name: "alternate_group"
        type { primitive: U16 }
    }
    field {
        name: "volume"
        type { primitive: U16 }
    }
    field {
        name: "reserved1"
        type { primitive: U16 }
        constant_value { int64_value: 0 }
    }
    field {
        name: "matrix"
        type {
            buffer {
                element_type { primitive: U32 }
                fixed_length: 9
            }
        }
    }
    field {
        name: "width"
        type { primitive: U32 }
    }
    field {
        name: "height"
        type { primitive: U32 }
    }
}

structs {
    name: "TrackHeaderBoxV1"
    endian: BIG_ENDIAN
    field {
        name: "creation_time"
        type { primitive: U64 }
    }
    field {
        name: "modification_time"
        type { primitive: U64 }
    }
    field {
        name: "track_id"
        type { primitive: U32 }
    }
    field {
        name: "reserved"
        type { primitive: U32 }
        constant_value { int64_value: 0 }
    }
    field {
        name: "duration"
        type { primitive: U64 }
    }
}

structs {
    name: "TrackHeaderBoxV0"
    endian: BIG_ENDIAN
    field {
        name: "creation_time"
        type { primitive: U32 }
    }
    field {
        name: "modification_time"
        type { primitive: U32 }
    }
    field {
        name: "track_id"
        type { primitive: U32 }
    }
    field {
        name: "reserved"
        type { primitive: U32 }
        constant_value { int64_value: 0 }
    }
    field {
        name: "duration"
        type { primitive: U32 }
    }
}

# Container: Media Box (‘mdia’)
# Mandatory: Yes
# Quantity: Exactly one 
#
# Definition:
# aligned(8) class MediaHeaderBox extends FullBox(‘mdhd’, version, 0) {
#     if (version==1) {
#         unsigned int(64) creation_time;
#         unsigned int(64) modification_time;
#         unsigned int(32) timescale;
#         unsigned int(64) duration;
#     } else { // version==0
#         unsigned int(32) creation_time;
#         unsigned int(32) modification_time;
#         unsigned int(32) timescale;
#         unsigned int(32) duration;
#     }
#     bit(1) pad = 0;
#     unsigned int(5)[3] language; // ISO-639-2/T language code
#     unsigned int(16) pre_defined = 0;
# } 
structs {
    name: "MediaHeaderBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "v1"
        type { named: "MovieHeaderBoxV1" }
        presence: "full_box_header.version == 1"
    }
    field {
        name: "v0"
        type { named: "MovieHeaderBoxV0" }
        presence: "full_box_header.version == 0"
    }
    field {
        name: "pad"
        type { primitive: U8 }
        bit_width: 1
        constant_value { int64_value: 0 }
    }
    field {
        name: "language"
        type { primitive: U16 }
        bit_width: 15
    }
    field {
        name: "pre_defined"
        type { primitive: U16 }
        constant_value { int64_value: 0 }
    }
}

# Container: Media Box (‘mdia’) or Meta Box (‘meta’)
# Mandatory: Yes
# Quantity: Exactly one 
# Definition:
#
# aligned(8) class HandlerBox extends FullBox(‘hdlr’, version = 0, 0) {
#     unsigned int(32) pre_defined = 0;
#     unsigned int(32) handler_type;
#     const unsigned int(32)[3] reserved = 0;
#     string name;
# }
structs {
    name: "HandlerBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "pre_defined"
        type { primitive: U32 }
        constant_value { int64_value: 0 }
    }
    field {
        name: "handler_type"
        type { primitive: U32 }
    }
    field {
        name: "reserved"
        type {
            buffer {
                element_type { primitive: U32 }
                fixed_length: 3
            }
        }
        constant_value { int64_value: [0, 0, 0] }
    }
    field {
        name: "name"
        type {
            buffer {
                element_type { primitive: U8 }
                end_terminated: true
            }
        }
    }
}

# Container: Media Information Box (‘minf’)
# Mandatory: Yes
# Quantity: Exactly one specific media header shall be present 
# Definition:
# 
# aligned(8) class VideoMediaHeaderBox
#     extends FullBox(‘vmhd’, version = 0, 1) {
#     template unsigned int(16) graphicsmode = 0; // copy, see below
#     template unsigned int(16)[3] opcolor = {0, 0, 0};
# }
structs {
    name: "VideoMediaHeaderBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "graphicsmode"
        type { primitive: U16 }
        constant_value { int64_value: 0 }
    }
    field {
        name: "opcolor"
        type {
            buffer {
                element_type { primitive: U16 }
                fixed_length: 3
            }
        }
        constant_value { int64_value: [0, 0, 0] }
    }
}

# Container: Sample Table Box (‘stbl’)
# Mandatory: Yes
# Quantity: Exactly one
# Definition:
# 
# aligned(8) class TimeToSampleBox
#     extends FullBox('stts', version = 0, 0) {
#     unsigned int(32) entry_count;
#     int i;
#     for (i=0; i < entry_count; i++) {
#         unsigned int(32) sample_count;
#         unsigned int(32) sample_delta;
#     }
# }
structs {
    name: "TimeToSampleBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "entry_count"
        type { primitive: U32 }
    }
    field {
        name: "entries"
        type {
            buffer {
                element_type { named: "TimeToSampleBoxEntry" }
                length_field_name: "entry_count"
            }
        }
    }
}

structs {
    name: "TimeToSampleBoxEntry"
    endian: BIG_ENDIAN
    field {
        name: "sample_count"
        type { primitive: U32 }
    }
    field {
        name: "sample_delta"
        type { primitive: U32 }
    }
}


# Container: Sample Table Box (‘stbl’)
# Mandatory: No
# Quantity: Zero or one
# Definition:
#
# aligned(8) class SyncSampleBox
#     extends FullBox('stss', version = 0, 0) {
#     unsigned int(32) entry_count;
#     int i;
#     for (i=0; i < entry_count; i++) {
#         unsigned int(32) sample_number;
#     }
# } 
structs {
    name: "SyncSampleBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "entry_count"
        type { primitive: U32 }
    }
    field {
        name: "sample_number"
        type {
            buffer {
                element_type { primitive: U32 }
                length_field_name: "entry_count"
            }
        }
    }
}

# Container: Edit Box (‘edts’)
# Mandatory: No
# Quantity: Zero or one 
# Definition:
#
# aligned(8) class EditListBox extends FullBox(‘elst’, version, 0) {
#     unsigned int(32) entry_count;
#     for (i=1; i <= entry_count; i++) {
#         if (version==1) {
#             unsigned int(64) segment_duration;
#             int(64) media_time;
#         } else { // version==0
#             unsigned int(32) segment_duration;
#             int(32) media_time;
#         }
#         int(16) media_rate_integer;
#         int(16) media_rate_fraction = 0;
#     }
# }
structs {
    name: "EditListBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "entry_count"
        type { primitive: U32 }
    }
    field {
        name: "entries"
        type {
            buffer {
                element_type { named: "EditListBoxEntry" }
                length_field_name: "entry_count"
            }
        }
        argument {
            name: "full_box_header"
            value: "full_box_header"
        }
    }
}

structs {
    name: "EditListBoxEntry"
    endian: BIG_ENDIAN
    argument {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "v1"
        type { named: "EditListBoxEntryV1" }
        presence: "full_box_header.version == 1"
    }
    field {
        name: "v0"
        type { named: "EditListBoxEntryV0" }
        presence: "full_box_header.version == 0"
    }

    field {
        name: "media_rate_integer"
        type { primitive: U16 }
    }
    field {
        name: "media_rate_fraction"
        type { primitive: U16 }
    }
}

structs {
    name: "EditListBoxEntryV1"
    endian: BIG_ENDIAN
    field {
        name: "segment_duration"
        type { primitive: U64 }
    }
    field {
        name: "media_time"
        type { primitive: I64 }
    }
}
structs {
    name: "EditListBoxEntryV0"
    endian: BIG_ENDIAN
    field {
        name: "segment_duration"
        type { primitive: U32 }
    }
    field {
        name: "media_time"
        type { primitive: I32 }
    }
}

# aligned(8) class DataEntryUrlBox (bit(24) flags)
#     extends FullBox(‘url ’, version = 0, flags) {
#     string location;
# }
structs {
    name: "DataEntryUrlBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    # TODO: Must check that the version = 0

    field {
        name: "location"
        type { string { buffer { element_type { primitive: U8 } end_marker: "\\0" } charset: UTF8 } }
        # When self-contained flag is set, no location is present.
        presence: "full_box_header.flags & 1 == 0"
    }
}


# aligned(8) class DataEntryUrnBox (bit(24) flags)
#     extends FullBox(‘urn ’, version = 0, flags) {
#     string name;
#     string location;
# } 

# aligned(8) class DataReferenceBox
#     extends FullBox(‘dref’, version = 0, 0) {
#     unsigned int(32) entry_count;
#     for (i=1; i <= entry_count; i++) {
#         DataEntryBox(entry_version, entry_flags) data_entry;
#     }
# }
structs {
    name: "DataReferenceBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    # TODO: Must check that the version = 0 and flags are 0

    field {
        name: "entry_count"
        type { primitive: U32 }
    }

    field {
        name: "boxes"
        type { buffer { element_type { primitive: U8 } end_terminated: true } }
    }
}

# aligned(8) class SampleSizeBox extends FullBox(‘stsz’, version = 0, 0) {
#     unsigned int(32) sample_size;
#     unsigned int(32) sample_count;
#     if (sample_size==0) {
#         for (i=1; i <= sample_count; i++) {
#             unsigned int(32) entry_size;
#         }
#     }
# }
structs {
    name: "SampleSizeBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "sample_size"
        type { primitive: U32 }
    }
    field {
        name: "sample_count"
        type { primitive: U32 }
    }
    field {
        name: "sample_sizes"
        type {
            buffer {
                element_type { primitive: U32 }
                length_field_name: "sample_count"
            }
        }
        presence: "sample_size == 0"
    }
}

# aligned(8) class SampleToChunkBox
#     extends FullBox(‘stsc’, version = 0, 0) {
#     unsigned int(32) entry_count;
#     for (i=1; i <= entry_count; i++) {
#         unsigned int(32) first_chunk;
#         unsigned int(32) samples_per_chunk;
#         unsigned int(32) sample_description_index;
#     }
# } 
structs {
    name: "SampleToChunkBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "entry_count"
        type { primitive: U32 }
    }
    field {
        name: "entries"
        type {
            buffer {
                element_type { named: "SampleToChunkBoxEntry" }
                length_field_name: "entry_count"
            }
        }
    }
}

structs {
    name: "SampleToChunkBoxEntry"
    endian: BIG_ENDIAN
    field {
        name: "first_chunk"
        type { primitive: U32 }
    }
    field {
        name: "samples_per_chunk"
        type { primitive: U32 }
    }
    field {
        name: "sample_description_index"
        type { primitive: U32 }
    }
}

# aligned(8) class ChunkOffsetBox
#     extends FullBox(‘stco’, version = 0, 0) {
#     unsigned int(32) entry_count;
#     for (i=1; i <= entry_count; i++) {
#         unsigned int(32) chunk_offset;
#     }
# }
structs {
    name: "ChunkOffsetBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "entry_count"
        type { primitive: U32 }
    }
    field {
        name: "chunk_offsets"
        type {
            buffer {
                element_type { primitive: U32 }
                length_field_name: "entry_count"
            }
        }
    }
}



# aligned(8) abstract class SampleEntry (unsigned int(32) format)
#     extends Box(format){
#     const unsigned int(8)[6] reserved = 0;
#     unsigned int(16) data_reference_index;
# }
# class HintSampleEntry() extends SampleEntry (protocol) {
#     unsigned int(8) data [];
# }
# class BitRateBox extends Box(‘btrt’){
#     unsigned int(32) bufferSizeDB;
#     unsigned int(32) maxBitrate;
#     unsigned int(32) avgBitrate;
# }
# class MetaDataSampleEntry(codingname) extends SampleEntry (codingname) {
# }
# class XMLMetaDataSampleEntry() extends MetaDataSampleEntry (’metx‘) {
#     string content_encoding; // optional
#     string namespace;
#     string schema_location; // optional
#     BitRateBox (); // optional
# }
# class TextMetaDataSampleEntry() extends MetaDataSampleEntry (‘mett’) {
#     string content_encoding; // optional
#     string mime_format;
#     BitRateBox (); // optional
# }
#  // Visual Sequences
# class PixelAspectRatioBox extends Box(‘pasp’){
#     unsigned int(32) hSpacing;
#     unsigned int(32) vSpacing;
# }
# class CleanApertureBox extends Box(‘clap’){
#     unsigned int(32) cleanApertureWidthN;
#     unsigned int(32) cleanApertureWidthD;
#     unsigned int(32) cleanApertureHeightN;
#     unsigned int(32) cleanApertureHeightD;
#     unsigned int(32) horizOffN;
#     unsigned int(32) horizOffD;
#     unsigned int(32) vertOffN;
#     unsigned int(32) vertOffD;
# } 
#
# class VisualSampleEntry(codingname) extends SampleEntry (codingname){
#     unsigned int(16) pre_defined = 0;
#     const unsigned int(16) reserved = 0;
#     unsigned int(32)[3] pre_defined = 0;
#     unsigned int(16) width;
#     unsigned int(16) height;
#     template unsigned int(32) horizresolution = 0x00480000; // 72 dpi
#     template unsigned int(32) vertresolution = 0x00480000; // 72 dpi
#     const unsigned int(32) reserved = 0;
#     template unsigned int(16) frame_count = 1;
#     string[32] compressorname;
#     template unsigned int(16) depth = 0x0018;
#     int(16) pre_defined = -1;
#     CleanApertureBox clap; // optional
#     PixelAspectRatioBox pasp; // optional
# }
#  // Audio Sequences
# class AudioSampleEntry(codingname) extends SampleEntry (codingname){
#     const unsigned int(32)[2] reserved = 0;
#     template unsigned int(16) channelcount = 2;
#     template unsigned int(16) samplesize = 16;
#     unsigned int(16) pre_defined = 0;
#     const unsigned int(16) reserved = 0 ;
#     template unsigned int(32) samplerate = { default samplerate of media}<<16;
# }
# aligned(8) class SampleDescriptionBox (unsigned int(32) handler_type)
#     extends FullBox('stsd', 0, 0){
#     int i ;
#     unsigned int(32) entry_count;
#     for (i = 1 ; i <= entry_count ; i++){
#         switch (handler_type){
#             case ‘soun’: // for audio tracks
#                 AudioSampleEntry();
#                 break;
#             case ‘vide’: // for video tracks
#                 VisualSampleEntry();
#                 break;
#             case ‘hint’: // Hint track
#                 HintSampleEntry();
#                 break;
#             case ‘meta’: // Metadata track
#                 MetadataSampleEntry();
#                 break;
#         }
#     }
# }

structs {
    name: "SampleDescriptionBox"
    endian: BIG_ENDIAN
    field {
        name: "full_box_header"
        type { named: "FullBoxHeader" }
    }
    field {
        name: "entry_count"
        type { primitive: U32 }
    }
    field {
        name: "entry_data"
        type { buffer { element_type { primitive: U8 } end_terminated: true } }
    }
}

structs {
    name: "SampleEntry"
    endian: BIG_ENDIAN
    field {
        name: "reserved"
        type {
            buffer {
                element_type { primitive: U8 }
                fixed_length: 6
            }
        }
        constant_value { int64_value: [0, 0, 0, 0, 0, 0] }
    }
    field {
        name: "data_reference_index"
        type { primitive: U16 }
    }
}

structs {
    name: "VisualSampleEntry"
    endian: BIG_ENDIAN
    field {
        name: "sample_entry"
        type { named: "SampleEntry" }
    }
    field {
        name: "pre_defined"
        type { primitive: U16 }
        constant_value { int64_value: 0 }
    }
    field {
        name: "reserved"
        type { primitive: U16 }
        constant_value { int64_value: 0 }
    }
    field {
        name: "pre_defined2"
        type {
            buffer {
                element_type { primitive: U32 }
                fixed_length: 3
            }
        }
        constant_value { int64_value: [0, 0, 0] }
    }
    field {
        name: "width"
        type { primitive: U16 }
    }
    field {
        name: "height"
        type { primitive: U16 }
    }
    field {
        name: "horizresolution"
        type { primitive: U32 }
    }
    field {
        name: "vertresolution"
        type { primitive: U32 }
    }
    field {
        name: "reserved2"
        type { primitive: U32 }
        constant_value { int64_value: 0 }
    }
    field {
        name: "frame_count"
        type { primitive: U16 }
    }    
    # First byte is the length of the string
    # Then the string itself
    # Then padding to 32
    field {
        name: "compressorname"
        type {
            buffer {
                element_type { primitive: U8 }
                fixed_length: 32
            }
        }
    }
    field {
        name: "depth"
        type { primitive: U16 }
    }
    field {
        name: "pre_defined3"
        type { primitive: U16 }
        constant_value { int64_value: 0xFFFF }
    }
}

# class AVCSampleEntry() extends VisualSampleEntry(type) {
#     // type is ‘avc1’ or 'avc3'
#     AVCConfigurationBox config;
#     MPEG4BitRateBox (); // optional
#     MPEG4ExtensionDescriptorsBox (); // optional
#     extra_boxes boxes; // optional
# }

# class AVCConfigurationBox extends Box(‘avcC’) {
#     AVCDecoderConfigurationRecord() AVCConfig;
# }

# aligned(8) class AVCDecoderConfigurationRecord {
#     unsigned int(8) configurationVersion = 1;
#     unsigned int(8) AVCProfileIndication;
#     unsigned int(8) profile_compatibility;
#     unsigned int(8) AVCLevelIndication;
#     bit(6) reserved = '111111'b;
#     unsigned int(2) lengthSizeMinusOne;
#     bit(3) reserved = '111'b;
#     unsigned int(5) numOfSequenceParameterSets;
#     for (i = 0; i < numOfSequenceParameterSets; i++) {
#         unsigned int(16) sequenceParameterSetLength ;
#         bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit;
#     }
#     unsigned int(8) numOfPictureParameterSets;
#     for (i = 0; i < numOfPictureParameterSets; i++) {
#         unsigned int(16) pictureParameterSetLength;
#         bit(8*pictureParameterSetLength) pictureParameterSetNALUnit;
#     }
#     if (profile_idc == 100 || profile_idc == 110 ||
#         profile_idc == 122 || profile_idc == 144)
#     {
#         bit(6) reserved = '111111'b;
#         unsigned int(2) chroma_format;
#         bit(5) reserved = '11111'b;
#         unsigned int(3) bit_depth_luma_minus8;
#         bit(5) reserved = '11111'b;
#         unsigned int(3) bit_depth_chroma_minus8;
#         unsigned int(8) numOfSequenceParameterSetExt;
#         for (i = 0; i < numOfSequenceParameterSetExt; i++) {
#             unsigned int(16) sequenceParameterSetExtLength;
#             bit(8*sequenceParameterSetExtLength) sequenceParameterSetExtNALUnit;
#         }
#     }
# }

structs {
    name: "AVCDecoderConfigurationRecord"
    endian: BIG_ENDIAN
    field {
        name: "configuration_version"
        type { primitive: U8 }
    }
    field {
        name: "avc_profile_indicator"
        type { primitive: U8 }
    }
    field {
        name: "profile_compatibility"
        type { primitive: U8 }
    }
    field {
        name: "avc_level_indication"
        type { primitive: U8 }
    }
    field {
        name: "reserved"
        type { primitive: U8 }
        bit_width: 6
        constant_value { int64_value: 0b111111 }
    }
    field {
        name: "length_size_minus_one"
        type { primitive: U8 }
        bit_width: 2
    }
    field {
        name: "reserved2"
        type { primitive: U8 }
        bit_width: 3
        constant_value { int64_value: 0b111 }
    }
    field {
        name: "num_sequence_parameter_sets"
        type { primitive: U8 }
        bit_width: 5
    }
    field {
        name: "sequence_parameter_sets"
        type {
            buffer {
                element_type { named: "AVCParameterSet" }
                length_field_name: "num_sequence_parameter_sets"
            }
        }
    }
    field {
        name: "num_picture_parameter_sets"
        type { primitive: U8 }
    }
    field {
        name: "picture_parameter_sets"
        type {
            buffer {
                element_type { named: "AVCParameterSet" }
                length_field_name: "num_picture_parameter_sets"
            }
        }
    }
}

structs {
    name: "AVCParameterSet"
    endian: BIG_ENDIAN

    field {
        name: "length"
        type { primitive: U16 }
    }
    field {
        name: "data"
        type {
            buffer {
                element_type { primitive: U8 }
                length_field_name: "length"
            }
        }
    }
}